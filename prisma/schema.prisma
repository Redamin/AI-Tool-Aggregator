// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Pricing {
  FREE
  PAID
  SUBSCRIPTION
}

enum CategoryName {
  RESUME
  INTERVIEW_PREP
  JOB_BOARD
  NETWORKING
  OTHER
}

model App {
  id          String     @id @default(cuid())
  url         String     @unique
  title       String
  description String
  pricing     Pricing
  imageUrl    String?
  isApproved  Boolean    @default(false)
  userId      String?
  submittedBy User?      @relation(fields: [userId], references: [id])
  categories  Category[]
  votes       Vote[]
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  updatedAt   DateTime   @updatedAt @map(name: "updated_at")
  bookmarks    Bookmark[]
}

model Category {
  id   String       @id @default(cuid())
  name CategoryName @unique
  apps App[]
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @updatedAt @map(name: "updated_at")
  submissions   App[]
  votes         Vote[]
  accounts      Account[]
  sessions      Session[]
  bookmarks      Bookmark[]

  @@map(name: "users")
}

model Bookmark {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  app       App      @relation(fields: [appId], references: [id])
  appId     String
  createdAt DateTime @default(now()) @map(name: "created_at")

  @@unique([userId, appId])
  @@map(name: "bookmarks")
}

model Vote {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  app    App    @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId  String

  @@unique([userId, appId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
